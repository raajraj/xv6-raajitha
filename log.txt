diff --git a/defs.h b/defs.h
index 82fb982..75eba48 100644
--- a/defs.h
+++ b/defs.h
@@ -104,7 +104,7 @@ int             pipewrite(struct pipe*, char*, int);
 //PAGEBREAK: 16
 // proc.c
 int             cpuid(void);
-void            exit(void);
+void            exit(int status);
 int             fork(void);
 int             growproc(int);
 int             kill(int);
@@ -117,9 +117,10 @@ void            sched(void);
 void            setproc(struct proc*);
 void            sleep(void*, struct spinlock*);
 void            userinit(void);
-int             wait(void);
+int             wait(int *status);
 void            wakeup(void*);
 void            yield(void);
+int		waitpid(int pid, int * status, int options);
 
 // swtch.S
 void            swtch(struct context**, struct context*);
diff --git a/proc.c b/proc.c
index 806b1b1..0c5bfef 100644
--- a/proc.c
+++ b/proc.c
@@ -225,12 +225,12 @@ fork(void)
 // An exited process remains in the zombie state
 // until its parent calls wait() to find out it exited.
 void
-exit(void)
+exit(int status)
 {
   struct proc *curproc = myproc();
   struct proc *p;
   int fd;
-
+  
   if(curproc == initproc)
     panic("init exiting");
 
@@ -260,7 +260,7 @@ exit(void)
         wakeup1(initproc);
     }
   }
-
+  curproc->exitstatus = status;  
   // Jump into the scheduler, never to return.
   curproc->state = ZOMBIE;
   sched();
@@ -270,7 +270,7 @@ exit(void)
 // Wait for a child process to exit and return its pid.
 // Return -1 if this process has no children.
 int
-wait(void)
+wait(int *status)
 {
   struct proc *p;
   int havekids, pid;
@@ -285,6 +285,7 @@ wait(void)
         continue;
       havekids = 1;
       if(p->state == ZOMBIE){
+	*status = p->exitstatus;
         // Found one.
         pid = p->pid;
         kfree(p->kstack);
@@ -303,6 +304,8 @@ wait(void)
     // No point waiting if we don't have any children.
     if(!havekids || curproc->killed){
       release(&ptable.lock);
+      if(status)
+	*status = -1;
       return -1;
     }
 
@@ -311,6 +314,53 @@ wait(void)
   }
 }
 
+//WAITPID process 
+
+int
+waitpid(int pid, int *status, int options)
+{
+  struct proc *p;
+  struct proc *curproc = myproc();
+  int p_found;
+
+  acquire(&ptable.lock);
+  for(;;){
+    p_found = 0;
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+    {
+      if(p->pid == pid){
+	continue;
+      p_found = 1;
+	
+     if(p->state == ZOMBIE){
+		pid = p->pid;
+        	kfree(p->kstack);
+        	p->kstack = 0;
+        	freevm(p->pgdir);
+        	p->state = UNUSED;
+        	p->pid = 0;
+        	p->parent = 0;
+        	p->name[0] = 0;
+        	p->killed = 0;
+        	if(status != 0)
+        	  *status=p->exitstatus;
+        	release(&ptable.lock);
+        	return pid;
+      }		
+     }
+    }
+    if(!p_found || curproc->killed){     
+      release(&ptable.lock);
+      if(status)
+        *status=-1;
+      return -1;
+    }
+    sleep(curproc, &ptable.lock);  //DOC: wait-sleep
+  }
+  return 0;
+}
+
+
 //PAGEBREAK: 42
 // Per-CPU process scheduler.
 // Each CPU calls scheduler() after setting itself up.
diff --git a/proc.h b/proc.h
index 1647114..a6fe66b 100644
--- a/proc.h
+++ b/proc.h
@@ -49,6 +49,7 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int exitstatus;		       // Exit status
 };
 
 // Process memory is laid out contiguously, low addresses first:
diff --git a/syscall.c b/syscall.c
index ee85261..89c01e1 100644
--- a/syscall.c
+++ b/syscall.c
@@ -103,6 +103,7 @@ extern int sys_unlink(void);
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_waitpid(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -126,6 +127,7 @@ static int (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_waitpid] sys_waitpid,
 };
 
 void
diff --git a/syscall.h b/syscall.h
index bc5f356..eda417c 100644
--- a/syscall.h
+++ b/syscall.h
@@ -20,3 +20,4 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_waitpid 22
diff --git a/sysproc.c b/sysproc.c
index 0686d29..ecab1af 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -16,16 +16,40 @@ sys_fork(void)
 int
 sys_exit(void)
 {
-  exit();
-  return 0;  // not reached
+  int epid;
+
+  if(argint(0, &epid) < 0)
+    return -1;
+  exit(epid);
+  return 0; //not reached
 }
 
 int
 sys_wait(void)
 {
-  return wait();
+  int* wpp;
+
+  if(argptr(0, (char **) &wpp, sizeof(int*)) < 0)
+    return -1;
+  return wait(wpp);
 }
 
+int 
+sys_waitpid(void)
+{
+  int wpid;
+  int * status;
+  int options;
+  
+  if(argint(0, &wpid) < 0)
+    return -1;
+  if(argptr(0,(char**) &status, sizeof(int*)) < 0)
+    return -1;
+  if(argint(0, &options) < 0)
+    return -1;
+  return waitpid(wpid, status, options);
+  return 0; 
+}  
 int
 sys_kill(void)
 {
@@ -89,3 +113,4 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
diff --git a/user.h b/user.h
index 4f99c52..cb5afbd 100644
--- a/user.h
+++ b/user.h
@@ -3,8 +3,8 @@ struct rtcdate;
 
 // system calls
 int fork(void);
-int exit(void) __attribute__((noreturn));
-int wait(void);
+void exit(int status) __attribute__((noreturn));
+int wait(int *status);
 int pipe(int*);
 int write(int, const void*, int);
 int read(int, void*, int);
@@ -23,6 +23,7 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int waitpid(int pid, int *status, int options);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/usys.S b/usys.S
index 8bfd8a1..024b71a 100644
--- a/usys.S
+++ b/usys.S
@@ -29,3 +29,4 @@ SYSCALL(getpid)
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(waitpid)
